class Replicator extends Box {
    String raft;
    int num;
    Bool arrow;

    String host;
    int port;

    String distributorHost = null;
    int distributorPort = -1;

    String jobID = null;

    Replicator(int num, float x, float y) {
        super(x, y, Color.white(), 20);
        raft = null;
        this.num = num;
        arrow = false;
        this.jobID = null;
    }

    void setHost(String host) {
        this.host = host;
    }

    String getHost() {
        return this.host;
    }

    void setPort(int port) {
        this.port = port;
    }

    String getPort() {
        return this.port;
    }

    void setRaft(String raft) {
        this.raft = raft;
    }

    void setDistributorPort(int port) {
        this.distributorPort = port;
    }

    int getDistributorPort() {
        return this.distributorPort;
    }

    void setDistributorHost(int host) {
        this.distributorHost = host;
    }

    int getDistributorHost() {
        return this.distributorHost;
    }

    void update() {
        super.update();
        stroke(0);
        fill(0);
        if (this.num < 10)
            text(""+this.num, xpos+8, ypos+15);
        else
            text(""+this.num, xpos+3, ypos+15);
        if (raft != null) {
            stroke(0);
            fill(255,255,255);
            rect(xpos-35,ypos,30,20);
            fill(0);
            text(raft, xpos-33, ypos+15);
        } else {
            stroke(200);
            fill(200,200,200);
            rect(xpos-35,ypos,30,20);
        }
        
        if (arrow) {
            start = 170;
            finish = 190;
            smooth();
            stroke(0);
            fill(0);
            arc(xpos+100, ypos+11, 50, 50, start*PI/180, finish*PI/180);
            rect(xpos+20, ypos+9, 60, 3);
        }
    }

    Bool processMessage(JSONObject jobj) {
        if (super.processMessage(jobj)) {
            return true;
        }
        String status = jobj.status;
        if (status.equals("connect")) {
            arrow = true;
            update();
            return true;
        }
        return false;
    }
}

class ReplicatorGroup extends Addressable {


    int nextUnnamedReplicator;
    float xpos, ypos;
    Replicator[] replicators;

    ReplicatorGroup(float x, float y) {
        xpos = x;
        ypost = y;

        replicators = new Replicator[22];

        int incX = 23;
        int incY = 23;
        int distributorPortNumber = 9000;
        for (int i = 0; i < 22; i++) {
            Replicator rep = new Replicator(i, x, (i*incY)+y);
            rep.setDistributorPort(distributorPortNumber++);
            replicators[i] = rep;
        }

        nextUnnamedReplicator = 0;
    }

    void update() {
        stroke(0);
        fill(0);
        text("replicators", xpos-35, ypos+20);
        for (int i = 0; i < replicators.length; i++)
            replicators[i].update();
    }

    Replicator matchDistributorPort(int port) {
        for (int i = 0; i < 22; i++) {
            Replicator rep = replicators[i];
            if (rep.getDistributorPort() == port)
                return rep;
        }
        println("rep: matchPort: no match");
        return null;
    }

    Replicator matchReplicatorNode(String host, int port) {
        for (int i = 0; i < 22; i++) {
            Replicator rep = replicators[i];
            // println("match: port = "+rep.getPort()+", host = "+rep.getHost());
            if ((rep.getPort() == port) && rep.getHost().equals(host))
                return rep;
        }
        println("rep: matchPort: no match");
        return null;
    }

    void assign(String id, String distributorHost, int distributorPort) {
        Replicator rep = matchDistributorPort(distributorPort);
        rep.setDistributorHost(distributorHost);
        rep.setComponentID(id);
        map.put(id, rep);
        nextUnnamedReplicator++;
        return rep;
    }

    void handleNode(JSONObject jobj) {
        String status = jobj.status;
        String id = jobj.componentID;
        Replicator rep = lookupID(id);
        if (status.equals("start")) {
            Replicator rep = lookupID(id);
            if (rep == null) {
                String distributorHost = jobj.distributor.host;
                int distributorPort = jobj.distributor.port;
                rep = assign(id, distributorHost, distributorPort);
                String host = jobj.server.host;
                int port = jobj.server.port;
                rep.setHost(host);
                rep.setPort(port);
                Bool handled = rep.processMessage(jobj);
            }
            return;
        }
        if (status.equals("connect")) {
            Bool handled = rep.processMessage(jobj);
            return;
        }
    }

    Replicator lookupComponentID(String componentID) {
        for (int i = 0; i < 22; i++) {
            Replicator rep = replicators[i];
            if (rep.getComponentID().equals(componentID))
                return rep;
        }
        return null;
    }

    void handleJob(JSONObject jobj) {
        String status = jobj.status;
        String id = jobj.componentID;
        if (status.equals("start")) {
            String host = jobj.replicatorHost;
            int port = jobj.replicatorPort;
            // println("host = "+host+", port = "+port);
            Replicator rep = matchReplicatorNode(host, port);
            println("setting id = "+id);
            rep.setComponentID(id);
            rep.setRaft(jobj.startupArgs.raft);
            rep.update();
        }
        if (status.equals("finish")) {
            Replicator rep = lookupComponentID(id);
            println("finish: id = "+id+", rep = "+rep);
            rep.setRaft(null);
            rep.update();
            println("finish: done");
        }
    }

    void processMessage(JSONObject jobj) {
        String component = jobj.component;
        Replicator rep = null;
        if (component.equals("replicator node")) {
            handleNode(jobj);
        } else if (component.equals("replicator job")) {
            handleJob(jobj);
        } else if (component.equals("wavefront job")) {
            handleJob(jobj);
        }
    }

}
