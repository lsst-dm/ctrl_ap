class Addressable {
    Color color;
    String componentID;
    HashMap map;

    Addressable() {
        this.color = null;
        this.componentID = null;
        this.map = new HashMap();
    }

    void setComponentID(String componentID) {
        this.componentID = componentID;
    }

    void getComponentID() {
        return this.componentID;
    }

    void setColor(Color color) {
        this.color = color;
    }

    void update() {
    }

    void lookupID(String id) {
        if (map.containsKey(id)) {
            return map.get(id);
        } else
            return null;
    }

    Bool processMessage(JSONObject jobj) {
        String status = jobj.status;
        if (status.equals("start")) {
            setColor(Color.lightGreen());
            update();
            return true;
        }
        return false;
    }
}

class Box extends Addressable {
    float xpos, ypos;
    int sizeX, sizeY;
    int alpha = 255;


    Box(float x, float y, Color color, int size) {
        super();
        xpos = x;
        ypos = y;
        sizeX = size;
        sizeY = size;
        this.color = color;
    }

    void update() {
        super.update();
        stroke(0);
        fill(color.r, color.g, color.b, alpha);
        rect(xpos,ypos,sizeX,sizeY);
    }
    
}

class LabeledBox extends Box {
    String label;

    LabeledBox(float x, float y, Color color, int size, String lab) {
        super(x, y, color, size);
        label = lab;
    }
    void update() {
        super.update();
        fill(0);
        text(label, xpos+10, ypos+15);
    }
}

class BaseDMCS extends LabeledBox {
    BaseDMCS(float x, float y) {
        super(x, y, Color.white(), 90, "       Base");
    }
}

class ArchiveDMCS extends LabeledBox {
    ArchiveDMCS(float x, float y) {
        super(x, y, Color.white(), 90, "     Archive");
    }
}


class LSSTCamera extends LabeledBox {
    LSSTCamera(float x, float y) {
        super(x, y, Color.lightGreen(), 80, "   Camera");
    }

    void update() {
        start = 190;
        finish = 225;
        smooth();
        stroke(0);
        fill(255);
        arc(xpos+20,ypos+20, 150,150, start*PI/180, finish*PI/180);
        super.update()
    }

}

/*
*/
class OCSMessageGroup {
    String visitText = null;
    String exposureText = null;
    String messageText = null;
    float x, y;
    Color color;
    
    OCSMessageGroup(float x, float y) {
        this.x = x;
        this.y = y;
        visitText = null;
        exposureText = null;
        messageText = null;
        color = Color.white();
    }

    void update() {
        stroke(0);
        fill(color.r, color.g, color.b, 255);
        rect(x,y,200,80);
        fill(200);
        text("Last OCS Message", x+3, y-5);
        fill(0);
        text("Last OCS Message", x+3, y-5);
        if (visitText != null) 
            text(visitText, x+3, y+30);
        if (messageText != null) 
            text(messageText, x+3, y+45);
        if (exposureText != null) 
            text(exposureText, x+3, y+60);
    }

    void processMessage(JSONObject jobj) {
        String cmd = jobj.cmd;
        if (cmd.equals("nextVisit")) {
            visitText = "Visit: "+jobj.visitID; 
            exposureText = null;
            messageText = "OCS: nextVisit sent";
            color = Color.lightGreen();
        } else if (cmd.equals("startIntegration")) {
            int x = jobj.exposureSequenceID;
            visitText = "Visit: "+jobj.visitID; 
            exposureText = "Exposure: "+jobj.exposureSequenceID;
            messageText = "Message: startIntegration sent";
            if (x == 0)
                color = Color.lightCyan();
            else 
                color = Color.lightPink();
        } else if (cmd.equals("startReadout")) {
            int x = jobj.exposureSequenceID;
            visitText = "Visit: "+jobj.visitID; 
            exposureText = "Exposure: "+x;
            messageText = "Message: startReadout sent";
            if (x == 0)
                color = Color.darkCyan();
            else
                color = Color.darkPink();
        } else {
           println("cmd = "+cmd);
        }
        update();
    }
/*
*/
}
