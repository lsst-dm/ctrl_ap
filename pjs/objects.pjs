class Addressable {
    Color color;
    String componentID;
    HashMap map;

    Addressable() {
        this.color = null;
        this.componentID = null;
        this.map = new HashMap();
    }

    void setComponentID(String componentID) {
        this.componentID = componentID;
    }

    void getComponentID() {
        return this.componentID;
    }

    void setColor(Color color) {
        this.color = color;
    }

    void update() {
    }

    void lookupID(String id) {
        if (map.containsKey(id)) {
            return map.get(id);
        } else
            return null;
    }

    Bool processMessage(JSONObject jobj) {
        String status = jobj.status;
        if (status.equals("start")) {
            setColor(Color.green());
            update();
            return true;
        }
        return false;
    }
}

class Box extends Addressable {
    float xpos, ypos;
    int sizeX, sizeY;
    int alpha = 255;


    Box(float x, float y, Color color, int size) {
        super();
        xpos = x;
        ypos = y;
        sizeX = size;
        sizeY = size;
        this.color = color;
    }

    void update() {
        super.update();
        stroke(0);
        fill(color.r, color.g, color.b, alpha);
        rect(xpos,ypos,sizeX,sizeY);
    }
    
}

class LabeledBox extends Box {
    String label;

    LabeledBox(float x, float y, Color color, int size, String lab) {
        super(x, y, color, size);
        label = lab;
    }
    void update() {
        super.update();
        fill(0);
        text(label, xpos+10, ypos+15);
    }
}

class BaseDMCS extends LabeledBox {
    BaseDMCS(float x, float y) {
        super(x, y, Color.white(), 90, "BaseDMCS");
    }
}

class ArchiveDMCS extends LabeledBox {
    ArchiveDMCS(float x, float y) {
        super(x, y, Color.white(), 90, "ArchiveDMCS");
    }
}


class LSSTCamera extends LabeledBox {
    LSSTCamera(float x, float y) {
        super(x, y, Color.green(), 80, "   Camera");
    }

    void update() {
        start = 190;
        finish = 225;
        smooth();
        stroke(0);
        fill(255);
        arc(xpos+20,ypos+20, 150,150, start*PI/180, finish*PI/180);
        super.update()
    }

}
