class Distributor extends Box {
    int num;
    String host;
    int port;
    int incomingPort;
    int acceptCount = 0;

    Distributor(int num, float x, float y) {
        super(x, y, Color.white(), 20);
        this.num = num;
        this.acceptCount = 0;
    }

    void update() {
        super.update();
        stroke(0);
        fill(0);
        if (this.num < 10)
            text(""+this.num, xpos+8, ypos+15);
        else
            text(""+this.num, xpos+3, ypos+15);
    }

    void processMessage(JSONObject jobj) {
        if (super.processMessage(jobj))
            return true;
        String status = jobj.status;
        if (status.equals("accept from")) {
            setColor(Color.cyan());
            acceptCount++;
            update();
        }
        return false;
    }

    void setHost(String host) {
        this.host = host;
    }

    String getHost() {
        return this.host;
    }

    void setPort(int port) {
        this.port = port;
    }

    String getPort() {
        return this.port;
    }

    void setIncomingPort(int port) {
        println("set port:"+port);
        this.incomingPort = port;
    }

    int getIncomingPort() {
        return this.incomingPort;
    }

}

class DistributorGroup extends Addressable {


    int nextUnnamedDistributor;
    float xpos, ypos;
    Distributor[] distributors;

    DistributorGroup(float x, float y) {
        super();
        xpos = x;
        ypost = y;

        distributors = new Distributor[22];

        int incX = 23;
        int incY = 23;
        int distributorPortNumber = 9000;
        for (int i = 0; i < 22; i++) {
            Distributor dist = new Distributor(i, x, (i*incY)+y);
            dist.setIncomingPort(distributorPortNumber++);
            distributors[i] = dist;
        }

        nextUnnamedDistributor = 0;
    }

    void update() {
        stroke(0);
        fill(0);
        text("Distributors", xpos, ypos+20);
        for (int i = 0; i < distributors.length; i++)
            distributors[i].update();
    }

    Distributor matchPort(int port) {
        for (int i = 0; i < 22; i++) {
            Distributor dist = distributors[i];
            if (dist.getIncomingPort() == port)
                return dist;
        }
        println("matchPort: no match");
        return null;
    }

    void assign(String id, int port) {
        Distributor dist = matchPort(port);
        dist.setComponentID(id);
        map.put(id,dist);
        nextUnnamedDistributor++;
        return dist;
    }


    void processMessage(JSONObject jobj) {
        String componentID = jobj.componentID;
        Distributor dist = lookupID(componentID);
        if (dist == null) {
            String host = jobj.server.host;
            int port = jobj.server.port;
            dist = assign(componentID, port);
            dist.setHost(host);
            dist.setPort(port);
        }
        Bool handled = dist.processMessage(jobj);
    }
}
