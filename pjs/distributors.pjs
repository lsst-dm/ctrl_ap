class Distributor extends Box {
    int num;
    Distributor(int num, float x, float y) {
        super(x, y, Color.white(), 20);
        this.num = num;
    }

    void update() {
        super.update();
        stroke(0);
        fill(0);
        if (this.num < 10)
            text(""+this.num, xpos+8, ypos+15);
        else
            text(""+this.num, xpos+3, ypos+15);
    }
}

class DistributorGroup extends Addressable {


    int nextUnnamedDistributor;
    float xpos, ypos;
    Distributor[] distributors;
    HashMap map;

    DistributorGroup(float x, float y) {
        super();
        xpos = x;
        ypost = y;

        distributors = new Distributor[22];

        int incX = 23;
        int incY = 23;
        for (int i = 0; i < 22; i++) {
            Distributor dist = new Distributor(i, x, (i*incY)+y);
            distributors[i] = dist;
        }
        map = new HashMap();
        nextUnnamedDistributor = 0;
    }

    void update() {
        stroke(0);
        fill(0);
        text("Distributors", xpos, ypos+20);
        for (int i = 0; i < distributors.length; i++)
            distributors[i].update();
    }
    void lookupDistributor(String id) {
        if (map.containsKey(id)) {
            return map.get(id);
        } else
            return null;
    }

    void assign(String id) {
        Distributor dist = distributors[nextUnnamedDistributor];
        dist.setComponentID(id);
        nextUnnamedDistributor++;
        return dist;
    }

    void processMessage(JSONObject jobj) {
        String id = jobj.componentID;
        String status = jobj.status;
        Distributor dist = lookupDistributor(id);
        if (dist == null) {
            dist = assign(id);
        }
        dist.processMessage(jobj);
    }
}
